#version 320 es

precision mediump float;

struct Material {
    sampler2D texture_diffuse1;
    sampler2D texture_specular1;
    float shininess;
};

struct PointLight {
    vec3 position;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

#define NR_POINT_LIGHTS 2

in vec3 FragPosition;
in vec3 Normal;
in vec2 TexCoords;

out vec4 color;

uniform vec3 viewPos;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform Material material;

vec3 CalcPointLight(PointLight vLight, Material vMat, vec3 vNormal, vec3 vFragPos, vec3 vViewDir);

void main()
{
    vec3 Result;
    vec3 ViewDir = normalize(viewPos - FragPosition);
    vec3 Norm = normalize(Normal);

    for(int i = 0; i < NR_POINT_LIGHTS; i++)
        Result += CalcPointLight(pointLights[i], material, Norm, FragPosition, ViewDir);

   color = vec4(Result, 1.0f);
}

// Calculates the color when using a point light.
vec3 CalcPointLight(PointLight vLight, Material vMat, vec3 vNormal, vec3 vFragPos, vec3 vViewDir)
{
    vec3 LightDir = normalize(vLight.position - vFragPos);

    // Diffuse shading
    float Diff = max(dot(vNormal, LightDir), 0.0);

    // Specular shading
    vec3 ReflectDir = reflect(-LightDir, vNormal);
    float Spec = pow(max(dot(vViewDir, ReflectDir), 0.0), vMat.shininess);

    // Attenuation
    float Distance = length(vLight.position - vFragPos);
    float Attenuation = 1.0f / (vLight.constant + vLight.linear * Distance + vLight.quadratic * (Distance * Distance));

    // Combine results
    vec3 Ambient = vLight.ambient * vec3(texture(vMat.texture_diffuse1, TexCoords));
    vec3 Diffuse = vLight.diffuse * Diff * vec3(texture(vMat.texture_diffuse1, TexCoords));
    vec3 Specular = vLight.specular * Spec * vec3(texture(vMat.texture_specular1, TexCoords));
    Ambient *= Attenuation;
    Diffuse *= Attenuation;
    Specular *= Attenuation;

    return (Ambient + Diffuse);
}